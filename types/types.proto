// Generate cmd: protoc --go_out=plugins=grpc:. types.proto
syntax = "proto3";

package types;


// Types definitions for HyperContainer
message ContainerPort {
    string name         = 1;
    int32 hostPort      = 2;
    int32 containerPort = 3;
    string protocol     = 4;
    string hostIP       = 5;
}

message EnvironmentVar {
    string env    = 1;
    string value  = 2;
}

message VolumeMount {
    string name       = 1;
    string mountPath  = 2;
    bool readOnly     = 3;
}

message WaitingStatus {
	string reason = 1;
}

message RunningStatus {
	string startedAt = 1;
}

message TermStatus {
    int32   exitCode    = 1;
    string  reason      = 2;
    string  message     = 3;
    string  startedAt   = 4;
    string  finishedAt  = 5;
}

message ContainerStatus {
    string name             = 1;
    string containerID      = 2;
    string phase            = 3;
    WaitingStatus waiting   = 4;
    RunningStatus running   = 5;
    TermStatus terminated   = 6;
}

// TODO: embed Container message to avoid repetition
message ContainerInfo {
  string name                       = 1;
  string containerID                = 2;
  string image                      = 3;
  string imageID                    = 4;
  repeated string commands          = 5;
  repeated string args              = 6;
  string workingDir                 = 7;
  repeated ContainerPort ports      = 8;
  repeated EnvironmentVar env       = 9;
  repeated VolumeMount volumeMounts = 10;
  bool tty                          = 11;
  string imagePullPolicy            = 12;
	string podID                      = 13;
	ContainerStatus status            = 14;
}

message Container {
  string name                       = 1;
  string containerID                = 2;
  string image                      = 3;
  string imageID                    = 4;
  repeated string commands          = 5;
  repeated string args              = 6;
  string workingDir                 = 7;
  repeated ContainerPort ports      = 8;
  repeated EnvironmentVar env       = 9;
  repeated VolumeMount volumeMounts = 10;
  bool tty                          = 11;
  string imagePullPolicy            = 12;
}

message RBDVolumeSource {
  repeated string monitors  = 1;
  string image              = 2;
  string fsType             = 3;
  string pool               = 4;
  string user               = 5;
  string keyring            = 6;
  bool readOnly             = 7;
}

message PodVolume {
	string name         = 1;
	string source       = 2;
	string driver       = 3;
	RBDVolumeSource rbd = 4;
}

message PodSpec {
	repeated PodVolume volumes    = 1;
	repeated Container containers = 2;
	map<string,string> labels     = 3;
	int32 vcpu                    = 4;
	int32 memory                  = 5;
}

message PodStatus {
	string phase                              = 1;
	string message                            = 2;
	string reason                             = 3;
	string hostIP                             = 4;
	repeated string podIP                     = 5;
	string startTime                          = 6;
	repeated ContainerStatus containerStatus  = 7;
	string finishTime                         = 8;
}

message PodInfo {
	string kind       = 1;
	string apiVersion = 2;
	string vm         = 3;
	PodSpec spec      = 4;
	PodStatus status  = 5;
}

message ImageInfo {
    string id                   = 1;
    string parentID             = 2;
    repeated string repoTags    = 3;
    repeated string repoDigests = 4;
    int64 created               = 5;
    int64 virtualSize           = 6;
    map<string,string> labels   = 7;
}

////////////////////   PublicAPI Request/Response   ///////////////////////////

message PodInfoRequest {
  string podID = 1;
}

message PodInfoResponse {
  PodInfo podInfo = 1;
}

message PodListRequest {
  string podID = 1;
  string vmID  = 2;
}

message PodListResult {
  string podID    = 1;
  string podName  = 2;
  string vmID     = 3;
  string status   = 4;
}

message PodListResponse {
  repeated PodListResult podList = 1;
}

message ContainerListRequest {
  string podID    = 1;
  string vmID     = 2;
  bool auxiliary  = 3;
}

message ContainerListResult {
  string containerID    = 1;
  string containerName  = 2;
  string podID          = 3;
  string status         = 4;
}

message ContainerListResponse {
  repeated ContainerListResult containerList = 1;
}

message ContainerInfoRequest {
  // container is the name or id of specified container
  string container = 1;
}

message ContainerInfoResponse {
  ContainerInfo containerInfo = 1;
}

message VMListResult {
  string vmID   = 1;
  string podID  = 2;
  string status = 3;
}

message VMListRequest {
  string podID = 1;
  string vmID  = 2;
}

message VMListResponse {
  repeated VMListResult vmList = 1;
}

message ImageListRequest {
  // filterArgs is a JSON-encoded set of filter arguments
  string filterArgs = 1;
  // filter is a shell glob string applied to repository names
  string filter     = 2;
  // all controls whether all images in the graph are filtered, or just the heads
  bool all          = 3;
}

message ImageListResponse {
  repeated ImageInfo imageList = 1;
}

message VMCreateRequest {
  int32 cpu     = 1;
  int32 memory  = 2;
}

message VMCreateResponse {
  string vmID = 1;
}

message VMRemoveRequest {
  string vmID = 1;
}

message VMRemoveResponse {
  int32 code    = 1;
  string cause  = 2;
}

message UserContainerPort {
  int32 hostPort      = 1;
  int32 containerPort = 2;
  int32 servicePort   = 3;
  string protocol     = 4;
}

message UserVolumeReference {
  string path   = 1;
  string volume = 2;
  bool readOnly = 3;
}

message UserFileReference {
  string path     = 1;
  string filename = 2;
  string perm     = 3;
  string user     = 4;
  string group    = 5;
}

message UserContainer {
  string name                           = 1;
  string image                          = 2;
  string workdir                        = 3;
  string restartPolicy                  = 4;
  bool tty                              = 5;
  map<string, string> sysctl            = 6;
  repeated EnvironmentVar envs          = 7;
  repeated string command               = 8;
  repeated string entrypoint            = 9;
  repeated UserContainerPort ports      = 10;
  repeated UserVolumeReference volumes  = 11;
  repeated UserFileReference files      = 12;
}

message UserResource {
  int32 vcpu    = 1;
  int32 memory  = 2;
}

message UserFile {
  string name     = 1;
  string encoding = 2;
  string uri      = 3;
  string content  = 4;
}

message UserVolumeOption {
  string user               = 1;
  string keyring            = 2;
  repeated string monitors  = 3;
}

message UserVolume {
  string name             = 1;
  string source           = 2;
  string driver           = 3;
  UserVolumeOption option = 4;
}

message UserInterface {
  string bridge = 1;
  string ip     = 2;
  string ifname = 3;
  string mac    = 4;
  string gateway  = 5;
}

message UserServiceBackend {
  string hostip   = 1;
  int32 hostport  = 2;
}

message UserService {
  string serviceip                  = 1;
  string protocol                   = 2;
  int32 serviceport                 = 3;
  repeated UserServiceBackend hosts = 4;
}

message PodLogConfig {
  string type                 = 1;
  map<string, string> config  = 2;
}

message UserPod {
  // TODO: rename this to name (renaming will also change restful API)
  string id                         = 1;
  string hostname                   = 2;
  string type                       = 3;
  string restartPolicy              = 4;
  bool tty                          = 5;
  map<string, string> labels        = 6;
  UserResource resource             = 7;
  PodLogConfig log                  = 8;
  repeated string dns               = 9;
  repeated UserContainer containers = 10;
  repeated UserFile files           = 11;
  repeated UserVolume volumes       = 12;
  repeated UserInterface interfaces = 13;
  repeated UserService services     = 14;
  repeated string whiteCIDRs        = 15;
}

message PodCreateRequest {
  UserPod podSpec = 1;
  string podID    = 2;
}

message PodCreateResponse {
  string podID = 1;
}

message PodRemoveRequest {
  string podID = 1;
}

message PodRemoveResponse {
  int32 code    = 1;
  string cause  = 2;
}

message ContainerLogsRequest {
  string  container   = 1;
  bool    follow      = 2;
  bool    timestamps  = 3;
  string  tail        = 4;
  string  since       = 5;  
  bool    stdout      = 6;
  bool    stderr      = 7;
}

message ContainerLogsResponse {
  bytes log = 1;
}

message DriverStatus {
  string name     = 1;
  string status   = 2;
}

message InfoRequest {
}

message InfoResponse {
  string  ID                      = 1;
  int32   containers              = 2;
  int32   images                  = 3;
  string  driver                  = 4;
  repeated DriverStatus  dstatus  = 5;
  string  dockerRootDir           = 6;
  string  indexServerAddress      = 7;
  string  executionDriver         = 8;
  int64   memTotal                = 9;
  int64   pods                    = 10;
  string  operatingSystem         = 11;
  string  name                    = 12;
}

message ContainerExecRequest{
    string containerID      = 1;
    repeated string command = 2;
    string tag              = 3;
    bool   tty              = 4;
    bytes  stdin            = 5;
}

message ContainerExecResponse{
    bytes stdout = 1;
}

message WaitRequest{
    string container = 1;
    string processId = 2;
    bool   noHang    = 3;
}

message WaitResponse{
    int32 exitCode = 1;
}

// PublicAPI defines the public APIs which are handled over TCP sockets.
service PublicAPI {
    // PodList implements GET /list?item=pod
    rpc PodList(PodListRequest) returns (PodListResponse) {}
    // PodCreate implements POST /pod/create
    rpc PodCreate(PodCreateRequest) returns (PodCreateResponse) {}
    // PodInfo implements GET /pod/info
    rpc PodInfo(PodInfoRequest) returns (PodInfoResponse) {}
    // PodRemove implements  DELETE /pod
    rpc PodRemove(PodRemoveRequest) returns (PodRemoveResponse) {}

    // ContainerList implements GET /list?item=container
    rpc ContainerList(ContainerListRequest) returns (ContainerListResponse) {}
    // ContainerInfo implements GET /container/info
    rpc ContainerInfo(ContainerInfoRequest) returns (ContainerInfoResponse) {}

    // ImageList implements GET /images/get
    rpc ImageList(ImageListRequest) returns (ImageListResponse) {}

    // VMList implements GET /list?item=vm
    rpc VMList(VMListRequest) returns (VMListResponse) {}
    // VMCreate implements POST /vm/create
    rpc VMCreate(VMCreateRequest) returns (VMCreateResponse) {}
    // VMRemove implements DELETE /vm
    rpc VMRemove(VMRemoveRequest) returns (VMRemoveResponse) {}

    // TODO: implements  GET    /pod/stats
    // TODO: implements  POST   /pod/labels
    // TODO: implements  POST   /pod/start
    // TODO: implements  POST   /pod/stop
    // TODO: implements  POST   /pod/kill
    // TODO: implements  POST   /pod/pause
    // TODO: implements  POST   /pod/unpause


    // ContainerLogs implements  GET  /container/logs
    rpc ContainerLogs(ContainerLogsRequest) returns (stream ContainerLogsResponse) {}
    // TODO: implements  POST   /container/create
    // TODO: implements  POST   /container/rename
    // TODO: implements  POST   /container/commit
    // TODO: implements  POST   /container/kill
    // ContainerExec implements  POST   /exec
    rpc ContainerExec(stream ContainerExecRequest) returns (stream ContainerExecResponse) {}
    // TODO: implements  POST   /attach
    // TODO: implements  POST   /tty/resize
    // Wait implements  GET    /exitcode
    rpc Wait(WaitRequest) returns (WaitResponse) {}

    // TODO: implements  GET    /service/list
    // TODO: implements  POST   /service/add
    // TODO: implements  POST   /service/update
    // TODO: implements  DELETE /service

    // TODO: implements  POST   /image/create
    // TODO: implements  POST   /image/load
    // TODO: implements  POST   /image/push
    // TODO: implements  DELETE /image
    // TODO: implements  POST   /image/build

    // TODO: implements  GET    /_ping
    // Info implements  GET    /info
    rpc Info(InfoRequest) returns (InfoResponse) {}
    // TODO: implements  GET    /version
    // TODO: implements  POST   /auth
}
